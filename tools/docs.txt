-----------
tools/waves
-----------

functions:
 WaveControl.init_wave(definition)
  create and return the table to hold the data of the wave, such as what is spawned and when
  'definition' is a table containing the current tick and the group that enemies will be added to
 usage:
  WaveControl.init_wave{tick=game.tick, group=LuaGroup}

 WaveControl.queue(wave, data)
  add an enemy creation instruction to our wave table
  'wave' is the wave table returned by init_wave()
  'data' is a table containing creation info, including the enemy name and how many ticks until creation
 usage:
  WaveControl.queue(wave, {tick=60, name='smallbiter'})

 WaveControl.create_wave(wave_index, multiplier, ticks)
  combines the 2 previous functions, so that you can supply an index for a wave composition,
  the optional multiplier to increase the amount of enemies, and the ticks between spawns
  'wave_index' (optional) is the key (or index) to use from the table that wave_config.lua returns
  default: '1' (wave 1 or entry [1] in the wave_config table)
  'multiplier' (optional) is what the enemy counts will be multiplied by
  default: '1' (1*count)
  'ticks' (optional) is the number of ticks to wait between spawning enemies.
  this value is ignored if the enemy already has a tick value that isn't 0 in wave_config
  this means if your pregen wave already has ticks assigned (not 0), they will still be used
  default: '0' (instant)
 usage:
  if a pregen wave is desired:
  WaveControl.create_wave(3, 2)
  this would create Wave 3 (entry [3] in wave_config table) with 2x enemies
  [3] = {{name='mediumbiter', count = 10, tick = 60}, {name='bigbiter', count = 5, tick = 120}}
  Wave 3 with 'multiplier' 2 is 20 medium biters, spawned 60 ticks (1s) apart,
  then 10 big biters, spawned 120 ticks (2s) apart
  if a single enemy type is desired:
  WaveControl.create_wave('bigbiter', 20)
  this would create 20 big biters

 WaveControl.move_and_attack(group, positions, target)
  issue a move and/or move+attack command
  'group' is the LuaGroup to issue the commands to
  'positions' is a table of positions. to use a single position, supply a table with a single entry
  'target' (optional) is a LuaEntity that the group will attack after moving to all positions
 usage:
  single move:
  WaveControl.move_and_attack(LuaGroup, {{x=100, y=200}})
  waypoint move:
  WaveControl.move_and_attack(LuaGroup, {{x=100, y=200}, {x=150, y=250}})
  single move and attack:
  WaveControl.move_and_attack(LuaGroup, {{x=100, y=200}}, LuaEntity)
  waypoint move and attack:
  WaveControl.move_and_attack(LuaGroup, {{x=100, y=200}, {x=150, y=250}}, LuaEntity)